import java.awt.Color;
import java.awt.Graphics2D;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JLabel;


/*
 * Introduction to Software Design Fall 2014
 * Game: Duck Hunt
 * Authors: 
 * 		Andrew Goettler
 * 		Joshua Svenson
 * Team Project: Arcade Game Redux
 * Problem Description: The goal of this project is to implement a classic arcade game in JavaTM 
 * 		with modern twists. A tutorial is provided for help getting started implementing the 
 * 		graphics, but this is intended as a guide and not as free code to just use. 
 * 		Because help is provided for the graphics, you may want to try and differentiate 
 * 		your game from other students by adding new and unique features.
 * Problem Documentation:
 * 		Coding Competition Rules: https://icon.uiowa.edu/d2l/le/content/2352034/fullscreen/3509067/View
 * 		Problem Description: https://icon.uiowa.edu/d2l/le/content/2352034/fullscreen/3509071/View
 */

public class DuckHuntGame extends Game
{
	private int duckCount;
	/**
	 * An integer to keep track of the round number
	 */
	private int round = 1;
	/**
	 * An integer to keep track of
	 */
	private final static int DUCKS_PER_ROUND = 10;
	private final static int SHOTS_ALLOWED = 3;
	private int ducksHit;
	private int shotsLeft = 3;
	private int randomDuck;
	private int duckBonus;
	private boolean mouseFired;
	
	public DuckHuntGame( JFrame gameFrame )
	{
		super( gameFrame );
		mouseFired = false;
		setRandomDuck();
	}

	@Override 
	public void initializeEntities()
	{
		Random random = new Random();
		int randomXCoord = random.nextInt(700)+50;
		
		
		duckAndRoundCounter();
		
		if(duckCount == randomDuck){
			Entity entity = new DuckEntity(this, "sprites/PurpleDuck.png", randomXCoord, 500);
			this.getEntities().add(entity);
			duckBonus = 100;
			
		}
		
		else
		{
			Entity entity = new DuckEntity(this, "sprites/Duck.png", randomXCoord, 500);
			this.getEntities().add(entity);
			duckBonus = 0;
		}
	}
	
	@Override public void mousePress()
	{
		if(this.shotsLeft > 0)
		{
			super.mousePress();
			
			// decrement the shot counter
			this.shotsLeft--;
		}
	}
	
	@Override public void mouseRelease()
	{
		super.mouseRelease();
		
		// reset mouse fired
		this.mouseFired = false;
	}
	
	@Override public boolean getMousePressed()
	{
		if(!this.mouseFired)
		{
			// if the mouse is in fact pressed, indicate that the mouse has fired
			if(super.getMousePressed())
			{
				// indicate that the mouse has fired
				this.mouseFired = true;
			}
			
			// return the mousePressed status
			return super.getMousePressed();
		}
		
		// if the mouse has fired, return false
		else
		{
			return false;
		}
	}

	@Override public void drawForeground(Graphics2D g)
	{
		g.setColor(Color.GREEN);
		g.fillRect(0,450, 800, 500);
	}
	
	@Override public void drawBackgroud(Graphics2D g)
	{
		// draw some sky
		g.setColor(Color.cyan);
		g.fillRect(0,0,800,500);
	}
	
	@Override public void drawText(Graphics2D g)
	{
		g.setColor(Color.white);
		g.drawString("Score: " + this.getGameScore(),10, 520);
		g.drawString("Round: " + this.getRound(), 10, 550);
		g.drawString("Ducks Hit This Round: " + ducksHit, 10, 580);
		g.drawString("Shots Left: " + this.shotsLeft, 10, 490);
	}
	
	public void notifyDuckShot()
	{
		ducksHit++;
		setGameScore(getGameScore() + (100 + duckBonus)*getRound());
		System.out.println(getGameScore());
	}
	
	public void duckAndRoundCounter()
	{
		shotsLeft = SHOTS_ALLOWED;
		
		if(duckCount >= DUCKS_PER_ROUND)
		{
			if(duckCount == ducksHit)
			{
				setGameScore(getGameScore() + 1000*getRound());
			}
			setRound(round+1);
			
			duckCount = 0;
			ducksHit = 0;
		}
		
		setDuckCount(duckCount + 1);
		
		if(duckCount == DUCKS_PER_ROUND && ducksHit == 0){
			this.endGame();
		}
	}
	
	public void setDuckCount(int count)
	{
		duckCount = count;
	}
	
	public int getDuckCount()
	{
		return duckCount;
	}
	
	public void setRound(int newRound)
	{
		round = newRound;
		setRandomDuck();
	}
	
	public int getRound()
	{
		return round;
	}
	
	public void setRandomDuck()
	{
		Random random = new Random();
		randomDuck = random.nextInt(getDucksPerRound());
	}
	
	public int getDucksPerRound()
	{
		return DUCKS_PER_ROUND;
	}
}
