package Team23_DuckHunt;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;


/*
 * Introduction to Software Design Fall 2014
 * Game: Duck Hunt
 * Authors: 
 * 		Andrew Goettler
 * 		Joshua Svenson
 * Team Project: Arcade Game Redux
 * Problem Description: The goal of this project is to implement a classic arcade game in JavaTM 
 * 		with modern twists. A tutorial is provided for help getting started implementing the 
 * 		graphics, but this is intended as a guide and not as free code to just use. 
 * 		Because help is provided for the graphics, you may want to try and differentiate 
 * 		your game from other students by adding new and unique features.
 * Problem Documentation:
 * 		Coding Competition Rules: https://icon.uiowa.edu/d2l/le/content/2352034/fullscreen/3509067/View
 * 		Problem Description: https://icon.uiowa.edu/d2l/le/content/2352034/fullscreen/3509071/View
 */

public class ScoreClient {
	private DatagramSocket socket;
	private ScoreList highScoreList;
	private InetAddress serverAddress;
	private int portNumber;
	private byte[] data;
	
	public ScoreClient(InetAddress serverAddress, int portNumber)
	{
		this.serverAddress = serverAddress;
		this.portNumber = portNumber;
		
		try
		{
			socket = new DatagramSocket();
		} catch ( SocketException socketException )
		{
			socketException.printStackTrace();
			System.exit( 1 );
		}
	}
	
	public String waitForPackets()
	{		
		while( true )
		{
			try
			{
				byte[] data = new byte[ 100 ];
				DatagramPacket receivePacket = new DatagramPacket( data, data.length );
				
				socket.receive( receivePacket );
				
				String message = new String( receivePacket.getData(), 0, receivePacket.getLength() );
				
				return message;
				
			} catch ( IOException exception )
			{
				exception.printStackTrace();
			}
		}
	}
	
	public boolean checkIfHighScore( int newHighScore )
	{
		// TODO allow for a smaller ScoreList
		if( newHighScore > highScoreList.getLeastValue().getScore() )
		{
			return true;
		}
		return false;
	}

	public void sendHighScore( Score newHighScore )
	{
		String message = newHighScore.toString();
		
		data = message.getBytes();
		
		DatagramPacket sendPacket = new DatagramPacket(data, data.length, serverAddress, portNumber);
		
		try {
			socket.send( sendPacket );
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void requestHighScoreList()
	{
		data = "listPlease".getBytes();
		
		DatagramPacket sendPacket = new DatagramPacket(data, data.length, serverAddress, portNumber);
		
		try {
			socket.send( sendPacket );
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		highScoreList = new ScoreList( waitForPackets() );
	}
	
	public ScoreList getHighScoreList()
	{
		return highScoreList;
	}
	
	/*public static void main( String[] args )
	{
		ScoreClient application;
		try {
			application = new ScoreClient(InetAddress.getLocalHost(), 6004);
			
			Score newScore = new Score("DLB", 12000);
			
			application.sendHighScore(newScore);
			application.requestHighScoreList();
			
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	}*/
}
